{
    "exercises": [
        {
            "langs": ["python","cpp"],
            "name": "Task 1",
            "reward": 1,
            "desc": "write sum of two numbers function ab(1,2)->3",
            "tests":{
                "ab(3,4)":7,
                "ab(3,1)":4
            }
        },
        {
            "langs": ["python","cpp"],
            "name": "Task 2",
            "reward": 1,
            "desc": "Write a function that takes a number as an argument, increments it by 1, and returns the result.<br>addition(0) ➞ 1",
            "tests":{
                "addition(0)":1,"addition(9)": 10
            }
        },
        {
            "langs": ["python","javascript"],
            "name": "Task 3",
            "reward": 1,
            "desc": "Create a function that takes as arguments the number of wins, draws, and losses. The function should calculate the total points that a football team has accumulated. win - 3, draws - 1, losses -0. <br>football_points(3, 4, 2) ➞ 13"
            ,
            "tests":{
                "football_points(3, 4, 2)":13,
                "football_points(5, 0, 2)":15

            }
        },
        {
            "langs": ["python","javascript"],
            "name": "Task 4 ",
            "reward": 2,
            "desc": "Write a function that returns the largest number from a list. Do not use the max() function.<br> find_highest([-1, 3, 5, 6, 99, 12, 2]) ➞ 99",
            "tests":{
                "find_highest([-1, 3, 5, 6, 99, 12, 2])":99,
                "find_highest([0, 12, 4, 87])":87
            }
        },
        {
           "langs": ["python","javascript"],
           "name": "Task 5",
           "reward": 1,
           "desc": "Write a function that takes a number and returns the number incremented by one, but without using mathematical operators.<br> increment(4) ➞ 5",
           "tests":{
               "increment(4)":5,"increment(-10)":-9
           }
       },
       {
          "langs": ["python","javascript"],
          "name": "Task 6",
          "reward": 1,
          "desc": "Write a function that shows how persistent a number is.<br> persistence(39) ➞ 3   # 3 * 9 = 27, 2 * 7 = 14, 1 * 4 = 4 ",
          "tests":{
              "persistence(39)": 3,
              "persistence(999)": 4
          }
      }

    ]
}